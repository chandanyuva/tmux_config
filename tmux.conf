# Improve colors
set -g default-terminal 'screen-256color'
# make colors inside tmux look the same as outside of tmux
# see https://github.com/tmux/tmux/issues/696
# see https://stackoverflow.com/a/41786092
set-option -ga terminal-overrides ",xterm-256color:Tc"


# change default prefix bind
unbind C-Space
set -g prefix C-Space
# Send Ctrl+space to applications by pressing it twice
bind C-Space send-prefix


# Customize the status line

# Change the status bar background color
# set -g status-fg  white
# Change the status bar forground color
# set -g status-bg  black
# Change inactive window color 
# set -g window-status-style bg=black,fg=white
# Change active window color
# set -g window-status-current-style bg=white,fg=black

# keep current path when creating new window
bind c new-window -c "#{pane_current_path}"

# split with | and -
bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}"

# Renumber windows sequentially after closing any of them.
# Otherwise if you close the second tab of three, you end up with tabs numbered 1 and 3
set -g renumber-windows on

# scroll, clickable windows and panes, resizable panes
set -g mouse on

# Set scrollback buffer to 10000
set -g history-limit 10000

# set window and pane index to 1 (default was 0)
set -g base-index 1
setw -g pane-base-index 1

# tmux messages are displayed for 3 seconds
set -g display-time 3000

# enable vi-copy-mode
setw -g mode-keys vi

# Making Copy-Paste More Intuitive
bind -T copy-mode-vi v send -X begin-selection # begin selection (highlight) by pressing v
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel # to yank the text with y
bind P paste-buffer # to paste from the tmux buffer (where our text is saved) with prefix + P
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel # copy the text that you highlight with the mouse (note that it has the same effect as the second line)


######## TPM ###########

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# rose-pine theme for tmux status-bar
set -g @plugin 'rose-pine/tmux'
set -g @rose_pine_variant 'main' # Options are 'main', 'moon' or 'dawn'
set -g @rose_pine_host 'on' # Enables hostname in the status bar

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# To Reload the config
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "Tmux config reloaded!"

# NOTE: with some changes, you may notice that even running Prefix + r isn't enough. You need to also restart the tmux server. Detach from the session, kill the server (tmux kill-server), then start a new session.
# Alternatively, you can also run Prefix + I (note the I is uppercased) to reload the tmux environment.
# if running Prefix + r is not sufficient, try running Prefix + I also. If all fails, restart the tmux


# WARN: NO KEYBINDS BELOW THIS POINT

######## TMUX DOCS #########


# The hierarchy goes like this: Server > Session > window > pane.

# Creating a New Session : tmux

# Named Session : tmux new -s SESSION_NAME

# Attaching a Session 
#   (outside tmux run) $ tmux ls \\to list running sessions
#   (then with the name of the session run) $ tmux attach -t SESSION_NAME 

# Detaching a Session 
#   Prefix + d

# (inside tmux) To see a list of sessions and travel between sessions 
#   Prefix + s

# Killing a Session
# There are two ways to kill a session:
#   1.Run the terminal command to kill a session : tmux kill-session -t SESSION_NAME
#   2.Close all the windows until there is no more : (to close a pane) Prefix + x | Ctrl + d  

# Creating a New Window
#   $ tmux new-window -n WINDOW_NAME | $ tmux neww -n WINDOW_NAME (neww is the same as new-window)
# insted of the above cmd use below keybind to create a new unnamed window and then rename it
#   Prefix + c

# Renaming Windows
#   Prefix + ,

# Switching Windows
#   go to the next window : Prefix + n
#   go to the previous window : Prefix + p
#   go to window number N : Prefix + N
#   To quickly jump to double window digits (like 11) : Prefix + ' + N

# quickly list and switch to any window in any session
#   Prefix + w
# When you do Prefix + w, tmux lists all the windows inside all the sessions you have (even the windows from detached sessions).

# Deleting Windows
# There are two ways to kill a window:
#   1.kill the window with a terminal command : 
#     kills the current window you're in : $ tmux kill-window
#     to kill a different window, you can pass a target option to the command -t : tmux kill-window -t WINDOW_NAME | tmux killw -t WINDOW_NAME
#   2.kill all panes inside a window : Prefix + x | Ctrl + d

# Creating a New Pane
#   To split a window horizontally: (cmd) tmux split-window -h | (default-keybind) Prefix + % | (my-keybind) Prefix + |
#   To split it window vertically: (cmd) tmux split-window -v | (default-keybing) Prefix + " | (my-keybind) Prefix + -

# Deleting a Pane
#   Prefix + x | Ctrl + d

# Navigate Between Panes
#   To switch to the "next" pane : Prefix + o
#   You can also move directionally with
#     Prefix + Up
#     Prefix + Down
#     Prefix + Left
#     Prefix + Right

# Display all the pane numbers of the current window for you to select from
#   Prefix + q + N
#   You should see numbers displayed in the foreground center of each pane. If you type a particular number[N], tmux will focus on that pane number.
# alternat way 
#   tmux display-panes
#   tmux select-pane -t N

# Resize a Pane
# tmux resize-pane -D 10 | prefix + ctrl+Down
# tmux resize-pane -U 10 | prefix + ctrl+Down
# tmux resize-pane -L 10 | prefix + ctrl+Down
# tmux resize-pane -R 10 | prefix + ctrl+Down

# Zoom a Pane
#   Prefix + z (use same to go back to normal)

# Swapping Panes
#   Prefix + {
#   Prefix + }
# Rotate the pane positions
#   Prefix + Ctrl + o

# Tmux Layouts
#   Tmux comes with 5 different layouts:
#     even-horizontal  : split horizontally evenly
#     even-vertical    : split vertically evenly
#     main-horizontal  : split vertically with the "main" pane taking up more space
#     main-vertical    : split horizontally with the "main" pane taking up more space
#     tiled            : tmux window is split equally
#   Toggle tmux layouts with a keyboard shortcut
#     Prefix + Space

# Tmux servers

# NOTE: SERVERS ARE NOT SESSIONS!!!
# By now, you should have a good idea what tmux can do. You should also understand how sessions, windows, and panes relate (otherwise, stop and review the last three sections). There is one more missing piece: tmux servers. Although you can do fine merely knowing about sessions, windows, and panes without knowing about tmux servers, it is good to know the whole picture to have a more accurate mental model. Understanding tmux server will explain why some commands, like tmux kill-server, exist (to kill the server, duh!)
# When we run the command tmux, tmux not only creates a new session, but it also creates a new server instance. This whole ecosystem that you have been interacting with - you can think of it like the client in client-server interaction. If it is like a client-server interaction, then there must be a tmux server somewhere. Tmux server is what runs in the background while Tmux client runs in the foreground.
# When we create multiple sessions: tmux new -s breakfast, tmux new -s lunch, and tmux new -s dinner, those three are connected to the same tmux server. Since we don't mention a server name, these sessions are connected to a default server.

# To launch a named server
#   tmux -L SERVER_NAME
#   Running this command also launches a new session by default

# Reconnect to the named server (after detaching)
#   tmux -L SERVER_NAME attach

# To create a new NAMED session inside the NAMED server
#   tmux -L SERVER_NAME new -s SESSION_NAME

# View all the sessions in the NAMED server
#   tmux -L SERVER_NAME ls
# whereas "tmux ls" list only the sessions in the default server 

# To kill the NAMED server
#   tmux -L SERVER_NAME kill-server 
# To kill Default server
#   tmux kill-server

# NOTE: If you run tmux kill-server when nothing is running, you'll see:
# no server running on /private/tmp/tmux-501/default
# Your exact path might be different from what I have, but the important ideas are:
# The command kill-server is looking in the tmp/ directory, which is usually where linux sockets are. Wait, did you say socket? That sounds like a client-server interaction!
# The directory is named "default" because we tried to kill the default server. By the way, if you created multiple servers, you'll find all those server names stored in here. So if you created a food server, you would find /food in there too.

# Vi Copy Mode
# To navigate your terminal history and to copy text, you need to switch to tmux copy mode (technically it is vi-copy-mode, but to keep it simple, let's call it copy mode).

# [default]
# To enable this copy mode : setw -g mode-keys vi
#   Ctrl + [ to enter tmux vi copy mode
#   Move around with vim navigation keys
#   Begin highlight with Space
#   Copy with Enter
#   Paste with Ctrl + ]

# [custom]
#   Enter the copy-mode with Ctrl + [
#   Position yourself to the start of the text you want to copy with vim navigation
#   Start highlight with v (similar to vim visual mode)
#   Yank the highlighted text with y
#   Paste with Prefix + P

# TMP install
# Clone TPM:
#   git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# Put this at the bottom of ~/.tmux.conf ($XDG_CONFIG_HOME/tmux/tmux.conf works too):

#   # List of plugins
#   set -g @plugin 'tmux-plugins/tpm'
#   set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'

# Reload TMUX environment so TPM is sourced:
# type this in terminal if tmux is already running
# tmux source ~/.tmux.conf

# Installing plugins
# Add new plugin to ~/.tmux.conf with set -g @plugin '...'
# Press prefix + I (capital i, as in Install) to fetch the plugin.
# You're good to go! The plugin was cloned to ~/.tmux/plugins/ dir and sourced.
#
# Uninstalling plugins
# Remove (or comment out) plugin from the list.
# Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
# All the plugins are installed to ~/.tmux/plugins/ so alternatively you can find plugin directory there and remove it.
#
# Key bindings
# prefix + I
#
# Installs new plugins from GitHub or any other git repository
# Refreshes TMUX environment
# prefix + U
#
# updates plugin(s)
# prefix + alt + u
#
# remove/uninstall plugins not on the plugin list
